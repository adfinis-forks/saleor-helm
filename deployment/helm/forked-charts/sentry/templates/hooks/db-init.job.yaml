# https://docs.sentry.io/server/installation/docker/#running-migrations
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "fullname" . }}-db-init"
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": {{ (default -5 .Values.jobs.dbInit.weight) | quote }}
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  activeDeadlineSeconds: {{ default 900 .Values.jobs.dbInit.activeDeadlineSeconds }}
  ttlSecondsAfterFinished: {{ default 120 .Values.jobs.dbInit.ttlSecondsAfterFinished }}
  backoffLimit: {{ default 5 .Values.jobs.dbInit.backOffLimit }}
  parallelism: 1
  completions: 1
  template:
    metadata:
      name: "{{ template "fullname" . }}-db-init"
      labels:
        app: {{ template "fullname" . }}
        release: "{{ .Release.Name }}"
    spec:
      restartPolicy: OnFailure
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.image.imagePullSecrets | indent 8 }}
      {{- end }}
      initContainers:
      # Delay launch this job until postgresql is ready
      - name: db-init-job-delay
        image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
        imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
        command:
        - /bin/bash
        - -c
        - >
          function is_pg_ready {
            pg_isready \
              --host=$(SENTRY_POSTGRES_HOST) \
              --port=$(SENTRY_POSTGRES_PORT) \
              --username=$(SENTRY_DB_USER) \
              --dbname=$(SENTRY_DB_NAME) \
              --timeout=1
          }

          while [[ "$(is_pg_ready)" != *"accepting connections"* ]]; do
            echo "response from server: $(is_pg_ready)";
            echo "waiting for {{ template "postgresql.fullname" . }} service" && sleep 5s;
          done

          echo -n "$(is_pg_ready)";
          echo "{{ template "postgresql.fullname" . }} is ready";
{{- include "sentry.standardEnv" . | indent 8 }}
      containers:
      - name: db-init-job
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command:
        - sh
        - -c
        - >
          sentry upgrade --noinput
        resources:
          requests:
            cpu: 300m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
{{- include "sentry.standardEnv" . | indent 8 }}
        volumeMounts:
        - mountPath: /etc/sentry
          name: config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: {{ template "fullname" . }}
